# coding:utf-8
import random

class Card:
    def __init__(self, num_suspicious_channel):
        self.num_suspicious_channel = num_suspicious_channel

    def get_num_suspicious_channel(self):
        return self.num_suspicious_channel

    def getname(self):
        return type(self).__name__

    def get_num_suspicious_channel_received(self):
        return 0


class TerminalCard(Card):
    def __init__(self, num_suspicious_channel):
        super(TerminalCard, self).__init__(num_suspicious_channel)
        self.num_suspicious_channel_received = 0
        self.attackers = []

    def add_num_suspicious_channel_received(self, attacker):
        self.num_suspicious_channel_received += 1

    def remove_num_suspicious_channel_received(self, attacker):
        if self.num_suspicious_channel_received > 0:
            self.num_suspicious_channel_received -= 1

    def get_num_suspicious_channel_received(self):
        return self.num_suspicious_channel_received

class EventCard(Card):
    def __init__(self, num_suspicious_channel):
        super(EventCard, self).__init__(num_suspicious_channel)

class EmptyPlace(Card):
    def __init__(self):
        super(EmptyPlace, self).__init__(0)


############################  Ternimnal Cards  ############################
class Ransomware(TerminalCard):
    def __init__(self):
        super(Ransomware, self).__init__(1)

class Spyware(TerminalCard):
    def __init__(self):
        super(Spyware, self).__init__(2)

class NormalTerminal(TerminalCard):
    def __init__(self):
        super(NormalTerminal, self).__init__(0)

class RemoteControlMalware(TerminalCard):
    def __init__(self):
        super(RemoteControlMalware, self).__init__(1)
        self.dest = None

    def set_dest(self, dest):
        self.dest = dest




############################  Event Cards  ############################
class I_want_you_to_get_in_consultation(EventCard):
    def __init__(self):
        super(I_want_you_to_get_in_consultation, self).__init__(1)

class Request_for_setting_change(EventCard):
    def __init__(self):
        super(Request_for_setting_change, self).__init__(1)

class Treat(EventCard):
    def __init__(self):
        super(Treat, self).__init__(0)




NUMDEPARTMENTS = 5
NUMCARDSInOneDepartment = 3
class Board:
    def __init__(self):
        self.departments = {
            0: '役員室',
            1: '総務部',
            2: '経理部',
            3: '営業部',
            4: 'サービス部'
        }

        # max_len_department_name = 0
        # for v in self.departments.values():
        #     max_len_department_name = max(max_len_department_name,len(v))
        # for k,v in self.departments.items():
        #     self.departments[k] = '　' * (max_len_department_name - len(v)) + v

        pool = [Ransomware(), Spyware(), NormalTerminal(), NormalTerminal(),
                RemoteControlMalware(), RemoteControlMalware(),
                I_want_you_to_get_in_consultation(),
                Request_for_setting_change(),
                Treat(), Treat()
                ]
        emptypool = [EmptyPlace(),EmptyPlace(),EmptyPlace(),EmptyPlace(),EmptyPlace()]
        self.cardplaces = []
        self.minimal_cards = []
        # set cards
        # 最低でも一つの部署に一つのカード

        for i in range(NUMDEPARTMENTS):
            self.minimal_cards.append(pool.pop(random.randrange(0,len(pool))))
        pool += emptypool
        while pool:
            self.cardplaces.append(pool.pop(random.randrange(0,len(pool))))
        for i in range(NUMDEPARTMENTS):
            self.cardplaces.insert(i*NUMCARDSInOneDepartment,self.minimal_cards.pop())


        # determine destinations of RemoteControlMalware
        for i in range(len(self.cardplaces)):
            if type(self.cardplaces[i]) is RemoteControlMalware:
                while True:
                    idx = random.randrange(0,len(self.cardplaces))
                    if isinstance(self.cardplaces[idx], TerminalCard) and idx != i:
                        self.cardplaces[i].set_dest(idx)
                        self.cardplaces[idx].add_num_suspicious_channel_received(i)
                        break


    def view_suspicious_channels(self):
        # in, out, in+out
        table = [[0] * NUMCARDSInOneDepartment for _ in range(NUMDEPARTMENTS)]
        for i in range(len(self.cardplaces)):
            table[i // NUMCARDSInOneDepartment][1] += self.cardplaces[i].get_num_suspicious_channel()
            table[i // NUMCARDSInOneDepartment][0] += self.cardplaces[i].get_num_suspicious_channel_received()

        for i in range(NUMDEPARTMENTS):
            print(self.departments[i] + ':'+'IN={},OUT={},SUM={}'.format(table[i][0],table[i][1],table[i][0]+table[i][1]))

    def view_all_situation(self):
        for i in range(NUMDEPARTMENTS):

            output = ' '
            sumout = 0
            sumin = 0
            for j in range(NUMCARDSInOneDepartment):
                c = self.cardplaces[i*NUMCARDSInOneDepartment+j]
                output += '{}:{}(IN:{},OUT:{}) '.format(i*NUMCARDSInOneDepartment+j+1,
                                             c.getname(),
                                             c.get_num_suspicious_channel_received(),
                                             c.get_num_suspicious_channel())
                if isinstance(c,RemoteControlMalware):
                    output += '->{} '.format(c.dest+1)
                sumout += c.get_num_suspicious_channel()
                sumin += c.get_num_suspicious_channel_received()
            print(self.departments[i] + ':IN={},OUT={},SUM={}'.format(sumin,sumout,sumin+sumout))
            print(output)


    def contain(self, place):
        place = place - 1
        if place < 0 and 15 <= place:
            print('引数を確認してください')
            return

        print(self.cardplaces[place])
        if isinstance(self.cardplaces[place], EventCard) or isinstance(self.cardplaces[place],NormalTerminal):
            print('負け！{}を封じ込めました'.format(self.cardplaces[place].getname()))
            return

        c = self.cardplaces[place]
        if isinstance(c, RemoteControlMalware):
            self.cardplaces[c.dest].remove_num_suspicious_channel_received(place)
        print('{}:{}(IN:{},OUT:{})->EmptyPlace'.format(place + 1, c.getname(), c.get_num_suspicious_channel_received(), c.get_num_suspicious_channel()))
        self.cardplaces[place] = EmptyPlace()
        b.view_all_situation()


b = Board()
b.view_all_situation()